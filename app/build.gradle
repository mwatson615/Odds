apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'easymvp-rx2'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

kapt {
    mapDiagnosticLocations = true
}

jacoco {
    toolVersion '0.8.1'
}

def keystorePropsFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropsFile))

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.rosebay.odds"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 3
        versionName "1.1"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField('String', 'ApiKey', ProdApiKey)
            buildConfigField('String', 'AdUnitID', AdUnitID)
            signingConfig signingConfigs.config
        }
        debug {
            testCoverageEnabled true
            buildConfigField('String', 'ApiKey', DevApiKey)
            buildConfigField('String', 'AdUnitID', TestAdUnitID)
        }
        buildTypes.each {
            it.buildConfigField('String', 'AdMobID', AdMobID)
            it.buildConfigField('String', 'BaseImageUrl', BaseImageUrl)
            it.buildConfigField('String', 'CustomSearchEngine', CustomSearchEngine)
            it.buildConfigField('String', 'BaseFirebaseUrl', BaseFirebaseUrl)
            it.buildConfigField('String', 'BaseGCFUrl', BaseGCFUrl)
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    def lifecycle_version = "2.2.0"
    def arch_version = "2.1.0"
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.google.android.gms:play-services-analytics:17.0.0'
    implementation 'com.google.android.gms:play-services-ads:19.2.0'
    implementation('com.google.apis:google-api-services-customsearch:v1-rev78-1.25.0') {
        exclude module: 'guava-jdk5'
    }
    implementation 'com.google.firebase:firebase-core:17.4.3'
    implementation 'com.google.firebase:firebase-database:19.3.1'
    implementation 'com.google.firebase:firebase-ads:19.2.0'
    implementation 'com.google.firebase:firebase-firestore:21.4.3'
    implementation 'com.github.frangsierra:rx2firebase:1.1.3'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.2.0'
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation 'androidx.room:room-runtime:2.2.5'
    kapt 'androidx.room:room-compiler:2.2.5'
    implementation 'androidx.room:room-rxjava2:2.2.5'

    implementation 'com.jakewharton:butterknife:10.2.1'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.squareup.retrofit2:retrofit:2.7.2'
    kapt 'com.jakewharton:butterknife-compiler:10.2.1'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.4.1'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.18'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    kapt 'com.google.dagger:dagger-compiler:2.26'
    implementation 'com.google.dagger:dagger:2.26'

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4'

    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview'
    })
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.2.0') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'org.mockito:mockito-android:3.3.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestUtil 'androidx.test:orchestrator:1.1.1'
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.3.0'
    androidTestImplementation 'org.mockito:mockito-android:3.3.0'
    testImplementation 'org.mockito:mockito-inline:3.3.0'
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.4'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
}

def coverageSourceDirs = ['../app/src/main/java']

def classDirs = fileTree(dir: '../app/build/intermediates/classes/debug/com',
        excludes: [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*ViewBinding*.*',
                '**/*_MembersInjector.class',
                '**/*_MembersInjector*.*',
                '../*Component*.*',
                '**/*_Provide*Factory*.*',
                '**/*_Factory.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
                '**/*Dagger*.*',
                '**/*Module.*',
                '**/*Module*.*',
                '**/*_ViewDelegate*.*',
                '**/*RoomModule*.class',
                '../*ContextModule*.class'])

task jacocoCombinedDebugCoverageReport(type: JacocoReport, dependsOn: ['connectedDebugAndroidTest', 'testDebugUnitTest']) {
    group = "Reporting"
    description = "Combined Jacoco coverage report for debug build"
    getClassDirectories().from(classDirs)
    getAdditionalClassDirs().from(files(coverageSourceDirs))
    getSourceDirectories().from(files(coverageSourceDirs))
    getExecutionData().from(files([fileTree(dir: 'build/outputs/code-coverage/connected', include: '**/*.ec'),
                           fileTree(dir: 'build/jacoco', include: '**/*.exec')]))
    onlyIf = {
        true
    }
    reports {
        xml.enabled true
        html.enabled true
    }
}

repositories {
    maven {
        url 'https://maven.google.com'
        // Alternative URL is 'https://dl.google.com/dl/android/maven2/'
    }
    mavenCentral()
}

apply plugin: 'com.google.gms.google-services'